### Starting build.
# Target: main.ml.depends, tags: { package(llvm), package(llvm.analysis), package(ppx_deriving.std), extension:ml, file:main.ml, ocaml, ocamldep, quiet, traverse }
ocamlfind ocamldep -package llvm -package ppx_deriving.std -package llvm.analysis -modules main.ml > main.ml.depends
# Target: ast.ml.depends, tags: { package(llvm), package(llvm.analysis), package(ppx_deriving.std), extension:ml, file:ast.ml, ocaml, ocamldep, quiet, traverse }
ocamlfind ocamldep -package llvm -package ppx_deriving.std -package llvm.analysis -modules ast.ml > ast.ml.depends
# Target: codegen.ml.depends, tags: { package(llvm), package(llvm.analysis), package(ppx_deriving.std), extension:ml, file:codegen.ml, ocaml, ocamldep, quiet, traverse }
ocamlfind ocamldep -package llvm -package ppx_deriving.std -package llvm.analysis -modules codegen.ml > codegen.ml.depends
# Target: ast.cmo, tags: { package(llvm), package(llvm.analysis), package(ppx_deriving.std), byte, compile, extension:cmo, extension:ml, file:ast.cmo, file:ast.ml, implem, ocaml, quiet, traverse }
ocamlfind ocamlc -c -package llvm -package ppx_deriving.std -package llvm.analysis -o ast.cmo ast.ml
# Target: lexer.mll, tags: { package(llvm), package(llvm.analysis), package(ppx_deriving.std), extension:mll, file:lexer.mll, lexer, ocaml, ocamllex, quiet, traverse }
/Users/oshikawahiroki/.opam/4.03.0/bin/ocamllex.opt -q lexer.mll
# Target: lexer.ml.depends, tags: { package(llvm), package(llvm.analysis), package(ppx_deriving.std), extension:ml, file:lexer.ml, ocaml, ocamldep, quiet, traverse }
ocamlfind ocamldep -package llvm -package ppx_deriving.std -package llvm.analysis -modules lexer.ml > lexer.ml.depends
# Target: parser.mly.depends, tags: { package(llvm), package(llvm.analysis), package(ppx_deriving.std), extension:mly, file:parser.mly, infer, menhir_ocamldep, ocaml, ocamldep, quiet, traverse }
menhir --raw-depend --ocamldep 'ocamlfind ocamldep -modules' parser.mly > parser.mly.depends
# Target: parser.mly, tags: { package(llvm), package(llvm.analysis), package(ppx_deriving.std), byte, compile, extension:ml, extension:mly, file:parser.ml, file:parser.mly, infer, menhir, ocaml, parser, quiet, traverse }
menhir --ocamlc 'ocamlfind ocamlc -package llvm -package ppx_deriving.std -package llvm.analysis' --infer parser.mly
# Target: parser.mli.depends, tags: { package(llvm), package(llvm.analysis), package(ppx_deriving.std), extension:mli, file:parser.mli, ocaml, ocamldep, quiet, traverse }
ocamlfind ocamldep -package llvm -package ppx_deriving.std -package llvm.analysis -modules parser.mli > parser.mli.depends
# Target: parser.cmi, tags: { package(llvm), package(llvm.analysis), package(ppx_deriving.std), byte, compile, extension:mli, file:parser.mli, interf, ocaml, quiet, traverse }
ocamlfind ocamlc -c -package llvm -package ppx_deriving.std -package llvm.analysis -o parser.cmi parser.mli
# Target: codegen.cmo, tags: { package(llvm), package(llvm.analysis), package(ppx_deriving.std), byte, compile, extension:cmo, extension:ml, file:codegen.cmo, file:codegen.ml, implem, ocaml, quiet, traverse }
ocamlfind ocamlc -c -package llvm -package ppx_deriving.std -package llvm.analysis -o codegen.cmo codegen.ml
# Target: lexer.cmo, tags: { package(llvm), package(llvm.analysis), package(ppx_deriving.std), byte, compile, extension:cmo, extension:ml, file:lexer.cmo, file:lexer.ml, implem, ocaml, quiet, traverse }
ocamlfind ocamlc -c -package llvm -package ppx_deriving.std -package llvm.analysis -o lexer.cmo lexer.ml
# Target: main.cmo, tags: { package(llvm), package(llvm.analysis), package(ppx_deriving.std), byte, compile, extension:cmo, extension:ml, file:main.cmo, file:main.ml, implem, ocaml, quiet, traverse }
ocamlfind ocamlc -c -package llvm -package ppx_deriving.std -package llvm.analysis -o main.cmo main.ml
# Target: ast.cmx, tags: { package(llvm), package(llvm.analysis), package(ppx_deriving.std), compile, extension:cmx, extension:ml, file:ast.cmx, file:ast.ml, implem, native, ocaml, quiet, traverse }
ocamlfind ocamlopt -c -package llvm -package ppx_deriving.std -package llvm.analysis -o ast.cmx ast.ml
# Target: parser.ml.depends, tags: { package(llvm), package(llvm.analysis), package(ppx_deriving.std), extension:ml, file:parser.ml, ocaml, ocamldep, quiet, traverse }
ocamlfind ocamldep -package llvm -package ppx_deriving.std -package llvm.analysis -modules parser.ml > parser.ml.depends
# Target: parser.cmx, tags: { package(llvm), package(llvm.analysis), package(ppx_deriving.std), compile, extension:cmx, extension:ml, file:parser.cmx, file:parser.ml, implem, native, ocaml, quiet, traverse }
ocamlfind ocamlopt -c -package llvm -package ppx_deriving.std -package llvm.analysis -o parser.cmx parser.ml
# Target: codegen.cmx, tags: { package(llvm), package(llvm.analysis), package(ppx_deriving.std), compile, extension:cmx, extension:ml, file:codegen.cmx, file:codegen.ml, implem, native, ocaml, quiet, traverse }
ocamlfind ocamlopt -c -package llvm -package ppx_deriving.std -package llvm.analysis -o codegen.cmx codegen.ml
# Target: lexer.cmx, tags: { package(llvm), package(llvm.analysis), package(ppx_deriving.std), compile, extension:cmx, extension:ml, file:lexer.cmx, file:lexer.ml, implem, native, ocaml, quiet, traverse }
ocamlfind ocamlopt -c -package llvm -package ppx_deriving.std -package llvm.analysis -o lexer.cmx lexer.ml
# Target: main.cmx, tags: { package(llvm), package(llvm.analysis), package(ppx_deriving.std), compile, extension:cmx, extension:ml, file:main.cmx, file:main.ml, implem, native, ocaml, quiet, traverse }
ocamlfind ocamlopt -c -package llvm -package ppx_deriving.std -package llvm.analysis -o main.cmx main.ml
# Target: main.native, tags: { package(llvm), package(llvm.analysis), package(ppx_deriving.std), dont_link_with, extension:native, file:main.native, link, native, ocaml, program, quiet, traverse }
ocamlfind ocamlopt -linkpkg -package llvm -package ppx_deriving.std -package llvm.analysis ast.cmx codegen.cmx parser.cmx lexer.cmx main.cmx -o main.native
# Compilation successful.
